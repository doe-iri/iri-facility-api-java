/*
 * IRI Facility API reference implementation Copyright (c) 2025,
 * The Regents of the University of California, through Lawrence
 * Berkeley National Laboratory (subject to receipt of any required
 * approvals from the U.S. Dept. of Energy).  All rights reserved.
 *
 * If you have questions about your rights to use or distribute this
 * software, please contact Berkeley Lab's Innovation & Partnerships
 * Office at IPO@lbl.gov.
 *
 * NOTICE.  This Software was developed under funding from the
 * U.S. Department of Energy and the U.S. Government consequently retains
 * certain rights. As such, the U.S. Government has been granted for
 * itself and others acting on its behalf a paid-up, nonexclusive,
 * irrevocable, worldwide license in the Software to reproduce,
 * distribute copies to the public, prepare derivative works, and perform
 * publicly and display publicly, and to permit other to do so.
 *
 */
package net.es.iri.api.facility.schema;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Models an error for the REST interface based on RFC 9457, "Problem Details for HTTP APIs."
 *
 * @author hacksaw
 */
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
@Schema(description = "Error structure for REST interface based on RFC 9457, \"Problem Details for HTTP APIs.\"")
public class Error {
    @JsonProperty("type")
    @Schema(description = "A URI reference that identifies the problem type.",
        example = "https://example.com/notFound",
        requiredMode = Schema.RequiredMode.REQUIRED, defaultValue = "about:blank")
    private URI type;

    @JsonProperty("title")
    @Schema(description = "A short, human-readable summary of the problem type.",
        example = "Not Found",
        requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    private String title;

    @JsonProperty("status")
    @Schema(description = "The HTTP status code generated by the origin server for this occurrence of the problem.",
        example = "404",
        requiredMode = Schema.RequiredMode.REQUIRED)
    @Min(100)
    @Max(599)
    private Integer status;

    @JsonProperty("detail")
    @Schema(description = "A human-readable explanation specific to this occurrence of the problem.",
        example = "Descriptive text.",
        requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    private String detail;

    @JsonProperty("instance")
    @Schema(description = "A URI reference that identifies the specific occurrence of the problem.",
        example = "http://localhost:8081/api/v1/status/events/f9d6e700-1807-45bd-9a52-e81c32d40c5a",
        requiredMode = Schema.RequiredMode.REQUIRED)
    private URI instance;

    /** RFC 7807 allows additional, application-specific members */
    @JsonIgnore
    private final Map<String, Object> extensions = new HashMap<>();

    @JsonAnyGetter
    public Map<String, Object> getExtensions() {
        return extensions;
    }

    @JsonAnySetter
    public void putExtension(String name, Object value) {
        // Avoid clobbering known fields if they appear in extensions
        if (!isKnownField(name)) {
            extensions.put(name, value);
        }
    }

    private static boolean isKnownField(String name) {
        return "type".equals(name) || "title".equals(name) || "status".equals(name)
            || "detail".equals(name) || "instance".equals(name);
    }

    // --- convenience ---
    public Error withType(URI v) { this.type = v; return this; }
    public Error withTitle(String v) { this.title = v; return this; }
    public Error withStatus(Integer v) { this.status = v; return this; }
    public Error withDetail(String v) { this.detail = v; return this; }
    public Error withInstance(URI v) { this.instance = v; return this; }
    public Error withExtension(String k, Object v) { putExtension(k, v); return this; }

    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Error that)) return false;
        return Objects.equals(type, that.type) &&
            Objects.equals(title, that.title) &&
            Objects.equals(status, that.status) &&
            Objects.equals(detail, that.detail) &&
            Objects.equals(instance, that.instance) &&
            Objects.equals(extensions, that.extensions);
    }

    @Override public int hashCode() {
        return Objects.hash(type, title, status, detail, instance, extensions);
    }

    @Override public String toString() {
        return "Error {" +
            "type=" + type +
            ", title='" + title + '\'' +
            ", status=" + status +
            ", detail='" + detail + '\'' +
            ", instance=" + instance +
            ", extensions=" + extensions +
            '}';
    }
}
